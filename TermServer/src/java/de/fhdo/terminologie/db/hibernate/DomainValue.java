/* 
 * CTS2 based Terminology Server and Terminology Browser
 * Copyright (C) 2013 FH Dortmund: Peter Haas, Robert Muetzner
 * government-funded by the Ministry of Health of Germany
 * government-funded by the Ministry of Health, Equalities, Care and Ageing of North Rhine-Westphalia and the European Union
 * 
 * This program is free software: you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation, either version 3 of the License, or (at your 
 * option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
 * for more details.
 *  
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package de.fhdo.terminologie.db.hibernate;
// Generated 24.10.2011 10:08:21 by Hibernate Tools 3.2.1.GA


import java.util.HashSet;
import java.util.Set;
import javax.persistence.*;
import static javax.persistence.GenerationType.IDENTITY;

/**
 * DomainValue generated by hbm2java
 */
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
@XmlRootElement
@XmlType(namespace="de.fhdo.termserver.types")
@Entity
@Table(name="domain_value"
    
)
public class DomainValue  implements java.io.Serializable {


     private Long domainValueId;
     private Domain domain;
     private String domainCode;
     private String domainDisplay;
     private String attribut1classname;
     private String attribut1value;
     private Integer orderNo;
     private String imageFile;
     private Set<DomainValue> domainValuesForDomainValueId1 = new HashSet<DomainValue>(0);
     private Set<DomainValue> domainValuesForDomainValueId2 = new HashSet<DomainValue>(0);
     private Set<SysParam> sysParamsForModifyLevel = new HashSet<SysParam>(0);
     private Set<CodeSystem> codeSystems = new HashSet<CodeSystem>(0);
     private Set<SysParam> sysParamsForValidityDomain = new HashSet<SysParam>(0);

    public DomainValue() {
    }

	
    public DomainValue(Domain domain, String domainCode, String domainDisplay) {
        this.domain = domain;
        this.domainCode = domainCode;
        this.domainDisplay = domainDisplay;
    }
    public DomainValue(Domain domain, String domainCode, String domainDisplay, String attribut1classname, String attribut1value, Integer orderNo, String imageFile, Set<DomainValue> domainValuesForDomainValueId1, Set<DomainValue> domainValuesForDomainValueId2, Set<SysParam> sysParamsForModifyLevel, Set<CodeSystem> codeSystems, Set<SysParam> sysParamsForValidityDomain) {
       this.domain = domain;
       this.domainCode = domainCode;
       this.domainDisplay = domainDisplay;
       this.attribut1classname = attribut1classname;
       this.attribut1value = attribut1value;
       this.orderNo = orderNo;
       this.imageFile = imageFile;
       this.domainValuesForDomainValueId1 = domainValuesForDomainValueId1;
       this.domainValuesForDomainValueId2 = domainValuesForDomainValueId2;
       this.sysParamsForModifyLevel = sysParamsForModifyLevel;
       this.codeSystems = codeSystems;
       this.sysParamsForValidityDomain = sysParamsForValidityDomain;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="domainValueId", unique=true, nullable=false)
    public Long getDomainValueId() {
        return this.domainValueId;
    }
    
    public void setDomainValueId(Long domainValueId) {
        this.domainValueId = domainValueId;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="domainId", nullable=false)
    public Domain getDomain() {
        return this.domain;
    }
    
    public void setDomain(Domain domain) {
        this.domain = domain;
    }
    
    @Column(name="domainCode", nullable=false, length=50)
    public String getDomainCode() {
        return this.domainCode;
    }
    
    public void setDomainCode(String domainCode) {
        this.domainCode = domainCode;
    }
    
    @Column(name="domainDisplay", nullable=false, length=100)
    public String getDomainDisplay() {
        return this.domainDisplay;
    }
    
    public void setDomainDisplay(String domainDisplay) {
        this.domainDisplay = domainDisplay;
    }
    
    @Column(name="attribut1Classname", length=50)
    public String getAttribut1classname() {
        return this.attribut1classname;
    }
    
    public void setAttribut1classname(String attribut1classname) {
        this.attribut1classname = attribut1classname;
    }
    
    @Column(name="attribut1Value", length=50)
    public String getAttribut1value() {
        return this.attribut1value;
    }
    
    public void setAttribut1value(String attribut1value) {
        this.attribut1value = attribut1value;
    }
    
    @Column(name="orderNo")
    public Integer getOrderNo() {
        return this.orderNo;
    }
    
    public void setOrderNo(Integer orderNo) {
        this.orderNo = orderNo;
    }
    
    @Column(name="imageFile", length=65535)
    public String getImageFile() {
        return this.imageFile;
    }
    
    public void setImageFile(String imageFile) {
        this.imageFile = imageFile;
    }
@ManyToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    @JoinTable(name="domainvalue2domainvalue", joinColumns = { 
        @JoinColumn(name="domainValueId2", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="domainValueId1", nullable=false, updatable=false) })
    public Set<DomainValue> getDomainValuesForDomainValueId1() {
        return this.domainValuesForDomainValueId1;
    }
    
    public void setDomainValuesForDomainValueId1(Set<DomainValue> domainValuesForDomainValueId1) {
        this.domainValuesForDomainValueId1 = domainValuesForDomainValueId1;
    }
@ManyToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    @JoinTable(name="domainvalue2domainvalue", joinColumns = { 
        @JoinColumn(name="domainValueId1", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="domainValueId2", nullable=false, updatable=false) })
    public Set<DomainValue> getDomainValuesForDomainValueId2() {
        return this.domainValuesForDomainValueId2;
    }
    
    public void setDomainValuesForDomainValueId2(Set<DomainValue> domainValuesForDomainValueId2) {
        this.domainValuesForDomainValueId2 = domainValuesForDomainValueId2;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="domainValueByModifyLevel")
    public Set<SysParam> getSysParamsForModifyLevel() {
        return this.sysParamsForModifyLevel;
    }
    
    public void setSysParamsForModifyLevel(Set<SysParam> sysParamsForModifyLevel) {
        this.sysParamsForModifyLevel = sysParamsForModifyLevel;
    }
@ManyToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    @JoinTable(name="domain_value_has_code_system", joinColumns = { 
        @JoinColumn(name="domain_value_domainValueId", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="code_system_id", nullable=false, updatable=false) })
    public Set<CodeSystem> getCodeSystems() {
        return this.codeSystems;
    }
    
    public void setCodeSystems(Set<CodeSystem> codeSystems) {
        this.codeSystems = codeSystems;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="domainValueByValidityDomain")
    public Set<SysParam> getSysParamsForValidityDomain() {
        return this.sysParamsForValidityDomain;
    }
    
    public void setSysParamsForValidityDomain(Set<SysParam> sysParamsForValidityDomain) {
        this.sysParamsForValidityDomain = sysParamsForValidityDomain;
    }




}


