/* 
 * CTS2 based Terminology Server and Terminology Browser
 * Copyright (C) 2013 FH Dortmund: Peter Haas, Robert Muetzner
 * government-funded by the Ministry of Health of Germany
 * government-funded by the Ministry of Health, Equalities, Care and Ageing of North Rhine-Westphalia and the European Union
 * 
 * This program is free software: you can redistribute it and/or modify it 
 * under the terms of the GNU General Public License as published by the 
 * Free Software Foundation, either version 3 of the License, or (at your 
 * option) any later version.
 *  
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
 * for more details.
 *  
 * You should have received a copy of the GNU General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package de.fhdo.db.hibernate;
// Generated 10.10.2012 15:20:29 by Hibernate Tools 3.2.1.GA


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * CodeSystemEntityVersion generated by hbm2java
 */
@Entity
@Table(name="code_system_entity_version"
    
)
public class CodeSystemEntityVersion  implements java.io.Serializable {


     private Long versionId;
     private CodeSystemEntity codeSystemEntity;
     private Long previousVersionId;
     private int status;
     private Date statusDate;
     private Date effectiveDate;
     private Integer majorRevision;
     private Integer minorRevision;
     private Date insertTimestamp;
     private Byte isLeaf;
     private Set<CodeSystemEntityVersionAssociation> codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId1 = new HashSet<CodeSystemEntityVersionAssociation>(0);
     private Set<CodeSystemConcept> codeSystemConcepts = new HashSet<CodeSystemConcept>(0);
     private Set<PropertyVersion> propertyVersions = new HashSet<PropertyVersion>(0);
     private Set<CodeSystemEntityVersionAssociation> codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId2 = new HashSet<CodeSystemEntityVersionAssociation>(0);
     private Set<AssociationType> associationTypes = new HashSet<AssociationType>(0);
     private Set<ConceptValueSetMembership> conceptValueSetMemberships = new HashSet<ConceptValueSetMembership>(0);
     private Set<CodeSystemMetadataValue> codeSystemMetadataValues = new HashSet<CodeSystemMetadataValue>(0);

    public CodeSystemEntityVersion() {
    }

	
    public CodeSystemEntityVersion(CodeSystemEntity codeSystemEntity, int status, Date statusDate, Date insertTimestamp) {
        this.codeSystemEntity = codeSystemEntity;
        this.status = status;
        this.statusDate = statusDate;
        this.insertTimestamp = insertTimestamp;
    }
    public CodeSystemEntityVersion(CodeSystemEntity codeSystemEntity, Long previousVersionId, int status, Date statusDate, Date effectiveDate, Integer majorRevision, Integer minorRevision, Date insertTimestamp, Byte isLeaf, Set<CodeSystemEntityVersionAssociation> codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId1, Set<CodeSystemConcept> codeSystemConcepts, Set<PropertyVersion> propertyVersions, Set<CodeSystemEntityVersionAssociation> codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId2, Set<AssociationType> associationTypes, Set<ConceptValueSetMembership> conceptValueSetMemberships, Set<CodeSystemMetadataValue> codeSystemMetadataValues) {
       this.codeSystemEntity = codeSystemEntity;
       this.previousVersionId = previousVersionId;
       this.status = status;
       this.statusDate = statusDate;
       this.effectiveDate = effectiveDate;
       this.majorRevision = majorRevision;
       this.minorRevision = minorRevision;
       this.insertTimestamp = insertTimestamp;
       this.isLeaf = isLeaf;
       this.codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId1 = codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId1;
       this.codeSystemConcepts = codeSystemConcepts;
       this.propertyVersions = propertyVersions;
       this.codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId2 = codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId2;
       this.associationTypes = associationTypes;
       this.conceptValueSetMemberships = conceptValueSetMemberships;
       this.codeSystemMetadataValues = codeSystemMetadataValues;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)
    
    @Column(name="versionId", unique=true, nullable=false)
    public Long getVersionId() {
        return this.versionId;
    }
    
    public void setVersionId(Long versionId) {
        this.versionId = versionId;
    }
@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="codeSystemEntityId", nullable=false)
    public CodeSystemEntity getCodeSystemEntity() {
        return this.codeSystemEntity;
    }
    
    public void setCodeSystemEntity(CodeSystemEntity codeSystemEntity) {
        this.codeSystemEntity = codeSystemEntity;
    }
    
    @Column(name="previousVersionId")
    public Long getPreviousVersionId() {
        return this.previousVersionId;
    }
    
    public void setPreviousVersionId(Long previousVersionId) {
        this.previousVersionId = previousVersionId;
    }
    
    @Column(name="status", nullable=false)
    public int getStatus() {
        return this.status;
    }
    
    public void setStatus(int status) {
        this.status = status;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="statusDate", nullable=false, length=19)
    public Date getStatusDate() {
        return this.statusDate;
    }
    
    public void setStatusDate(Date statusDate) {
        this.statusDate = statusDate;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="effectiveDate", length=19)
    public Date getEffectiveDate() {
        return this.effectiveDate;
    }
    
    public void setEffectiveDate(Date effectiveDate) {
        this.effectiveDate = effectiveDate;
    }
    
    @Column(name="majorRevision")
    public Integer getMajorRevision() {
        return this.majorRevision;
    }
    
    public void setMajorRevision(Integer majorRevision) {
        this.majorRevision = majorRevision;
    }
    
    @Column(name="minorRevision")
    public Integer getMinorRevision() {
        return this.minorRevision;
    }
    
    public void setMinorRevision(Integer minorRevision) {
        this.minorRevision = minorRevision;
    }
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="insertTimestamp", nullable=false, length=19)
    public Date getInsertTimestamp() {
        return this.insertTimestamp;
    }
    
    public void setInsertTimestamp(Date insertTimestamp) {
        this.insertTimestamp = insertTimestamp;
    }
    
    @Column(name="isLeaf")
    public Byte getIsLeaf() {
        return this.isLeaf;
    }
    
    public void setIsLeaf(Byte isLeaf) {
        this.isLeaf = isLeaf;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="codeSystemEntityVersionByCodeSystemEntityVersionId1")
    public Set<CodeSystemEntityVersionAssociation> getCodeSystemEntityVersionAssociationsForCodeSystemEntityVersionId1() {
        return this.codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId1;
    }
    
    public void setCodeSystemEntityVersionAssociationsForCodeSystemEntityVersionId1(Set<CodeSystemEntityVersionAssociation> codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId1) {
        this.codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId1 = codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId1;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="codeSystemEntityVersion")
    public Set<CodeSystemConcept> getCodeSystemConcepts() {
        return this.codeSystemConcepts;
    }
    
    public void setCodeSystemConcepts(Set<CodeSystemConcept> codeSystemConcepts) {
        this.codeSystemConcepts = codeSystemConcepts;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="codeSystemEntityVersion")
    public Set<PropertyVersion> getPropertyVersions() {
        return this.propertyVersions;
    }
    
    public void setPropertyVersions(Set<PropertyVersion> propertyVersions) {
        this.propertyVersions = propertyVersions;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="codeSystemEntityVersionByCodeSystemEntityVersionId2")
    public Set<CodeSystemEntityVersionAssociation> getCodeSystemEntityVersionAssociationsForCodeSystemEntityVersionId2() {
        return this.codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId2;
    }
    
    public void setCodeSystemEntityVersionAssociationsForCodeSystemEntityVersionId2(Set<CodeSystemEntityVersionAssociation> codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId2) {
        this.codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId2 = codeSystemEntityVersionAssociationsForCodeSystemEntityVersionId2;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="codeSystemEntityVersion")
    public Set<AssociationType> getAssociationTypes() {
        return this.associationTypes;
    }
    
    public void setAssociationTypes(Set<AssociationType> associationTypes) {
        this.associationTypes = associationTypes;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="codeSystemEntityVersion")
    public Set<ConceptValueSetMembership> getConceptValueSetMemberships() {
        return this.conceptValueSetMemberships;
    }
    
    public void setConceptValueSetMemberships(Set<ConceptValueSetMembership> conceptValueSetMemberships) {
        this.conceptValueSetMemberships = conceptValueSetMemberships;
    }
@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="codeSystemEntityVersion")
    public Set<CodeSystemMetadataValue> getCodeSystemMetadataValues() {
        return this.codeSystemMetadataValues;
    }
    
    public void setCodeSystemMetadataValues(Set<CodeSystemMetadataValue> codeSystemMetadataValues) {
        this.codeSystemMetadataValues = codeSystemMetadataValues;
    }




}


